Collections : 

Arrays are static data structures, means once they are assigned we cannot alter the values. But, if i want to enter the elements irrespective of size, then we need the help of Collections. 

Collections can grow to any size, and dynamically we can enter the data. 

Collections are coming from java.util package 

In collections, we have 3 top level interfaces as

1) List 

	Allows you to store list of elements, By default collections stores data in terms of objects. 

	ArrayList, Vector and LinkedList are falling under List interface. 

Wrapper classes are class, which are known as primitive data type classes, which allows you to write Objects of vlaue types. 

Integer i = new Integer(12);


2) Set : This interface allows you to eliminate duplicate entries from the given list. 

	HashSet and LinkedHashSet are falling under Set interface. 

	The diff. between HashSet and LinkedHashSet is 

		HashSet display data in random order, where in LinkedHashSet displays data in 
	Insertion Order. 

3) SortedSet : This interface derived from Set interface, that which allows you Display elements in sorted order. TreeSet is falling under SortedSet interface. 

Exception in thread "main" java.lang.ClassCastException: class com.java.collections.Employ cannot be cast to class java.lang.Comparable (com.java.collections.Employ is in unnamed module of loader 'app'; java.lang.Comparable is in module java.base of loader 'bootstrap')
	at java.base/java.util.TreeMap.compare(TreeMap.java:1563)
	at java.base/java.util.TreeMap.addEntryToEmptyMap(TreeMap.java:768)
	at java.base/java.util.TreeMap.put(TreeMap.java:777)
	at java.base/java.util.TreeMap.put(TreeMap.java:534)
	at java.base/java.util.TreeSet.add(TreeSet.java:255)
	at com.java.collections.SortEmploy.main(SortEmploy.java:10)


Drawbacks with collections, 

Collections can store any kind of data, and sometimes it leads to security issues, because i need a collection, that strictly takes integers or String or custom classes (Employ) etc... Then collections will not support, that situation, we need the help of Generics. 

Generics provides an opportunity to pass data types at runtime, They can be represented by using <T>, means
it place of T, you can pass any data type, as value type or reference type or custom type. 

If you want to make any method as write one and apply for all types, then we need the help of generics. 

Advantages : 
_______________

	(i) Write Once and apply for all types

	(ii) Provides security to the data 

	(iii) No Typecasting

	(iv) Reduces the size of the program. 


Properties : 
_____________

Properties allows you to define any variable as a field. 

If you want to control the internal behaviour of the particular entity then we need the help of properites. 

These are the methods only, can be used for value types operations. 

There are various types of properties as

1) Read Only

2) Write Only

3) ReadWrite

Properties can be defined by using getter and setter. 

For readonly properties, we don't have any setter.

For writeonly properties, we don't have any getter. 

For ReadWrite properties, we can get both getter and setter. 

Employ 
    empno
    name
    gender
    dept
    desig
    basic

Gender take as ENUM (MALE, FEMALE) 

1) Add Employ
2) Show Employ
3) Search Employ
4) Delete Employ
5) Update Employ

Validations : 
______________

empno cannot be zero or negative
name contains min. 5 characters
dept contains min 3 characters
desig contains min 4 characters
basic must be between 20000 and 90000

If any validation fails, raise CustomExceptions.


Files we need are 

Model Class (Employ.java)
Exception Class (EmployException.java) 
DAO Class (EmployDAO.java) contains all  business logic operations
BAL Class (EmployBAL.java) calls DAO in BAL and checks for all validations. 
Main Class (EmployMain.java) call all BAL methods and entry point for the program. 

































